{"ast":null,"code":"// /root/install-wizard/docker-templates/frontend-app-template/src/App.js\nimport React,{useState}from'react';import'./App.css';import DependenciesCheckPage from'./DependenciesCheckPage';import CreateProjectPage from'./CreateProjectPage';import HomePage from'./HomePage';import ProjectDetailsPage from'./ProjectDetailsPage';import{jsx as _jsx}from\"react/jsx-runtime\";function App(){// Состояние для управления шагами в React-части (если она управляет собственной навигацией)\n// Изначально предположим, что начинается с HomePage или DependenciesCheckPage\nconst[wizardStep,setWizardStep]=useState('home');// Или 'dependenciesCheck'\n// Функция, которая вызывается, когда зависимости готовы в DependenciesCheckPage\nconst handleDependenciesReady=()=>{console.log(\"App.js: DependenciesCheckPage сообщил о готовности React-части. Переход на CreateProjectPage.\");setWizardStep('createProject');// Переключаем React-часть на следующий шаг\n};// Функция для рендеринга текущего React-компонента в зависимости от состояния wizardStep\nconst renderCurrentPage=()=>{switch(wizardStep){case'dependenciesCheck':return/*#__PURE__*/_jsx(DependenciesCheckPage,{onDependenciesReady:handleDependenciesReady});case'createProject':return/*#__PURE__*/_jsx(CreateProjectPage,{});case'home':return/*#__PURE__*/_jsx(HomePage,{});case'projectDetails':return/*#__PURE__*/_jsx(ProjectDetailsPage,{});default:return/*#__PURE__*/_jsx(HomePage,{});// По умолчанию или если не определено\n}};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:renderCurrentPage()});}export default App;","map":{"version":3,"names":["React","useState","DependenciesCheckPage","CreateProjectPage","HomePage","ProjectDetailsPage","jsx","_jsx","App","wizardStep","setWizardStep","handleDependenciesReady","console","log","renderCurrentPage","onDependenciesReady","className","children"],"sources":["/root/install-wizard/docker-templates/frontend-app-template/src/App.js"],"sourcesContent":["// /root/install-wizard/docker-templates/frontend-app-template/src/App.js\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport DependenciesCheckPage from './DependenciesCheckPage';\nimport CreateProjectPage from './CreateProjectPage';\nimport HomePage from './HomePage';\nimport ProjectDetailsPage from './ProjectDetailsPage';\n\nfunction App() {\n    // Состояние для управления шагами в React-части (если она управляет собственной навигацией)\n    // Изначально предположим, что начинается с HomePage или DependenciesCheckPage\n    const [wizardStep, setWizardStep] = useState('home'); // Или 'dependenciesCheck'\n\n    // Функция, которая вызывается, когда зависимости готовы в DependenciesCheckPage\n    const handleDependenciesReady = () => {\n        console.log(\"App.js: DependenciesCheckPage сообщил о готовности React-части. Переход на CreateProjectPage.\");\n        setWizardStep('createProject'); // Переключаем React-часть на следующий шаг\n    };\n\n    // Функция для рендеринга текущего React-компонента в зависимости от состояния wizardStep\n    const renderCurrentPage = () => {\n        switch (wizardStep) {\n            case 'dependenciesCheck':\n                return <DependenciesCheckPage onDependenciesReady={handleDependenciesReady} />;\n            case 'createProject':\n                return <CreateProjectPage />;\n            case 'home':\n                return <HomePage />;\n            case 'projectDetails':\n                return <ProjectDetailsPage />;\n            default:\n                return <HomePage />; // По умолчанию или если не определено\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            {/* Здесь будет рендериться React-часть.\n                Если public/index.html отображает свой UI, а React-приложение встраивается в него,\n                то App.js будет управлять только встроенной частью.\n                Если React-приложение - это основной UI, то эта структура актуальна.\n                Судя по всему, ваш React-фронтенд - это одностраничное приложение, которое может\n                встраиваться в public/index.html, либо public/index.html - это просто заглушка\n                или часть инициализации.\n                Поскольку public/script.js управляет основной навигацией, этот App.js будет отвечать\n                только за внутренние компоненты, которые он сам рендерит.\n                */}\n            {renderCurrentPage()}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,WAAW,CAClB,MAAO,CAAAC,qBAAqB,KAAM,yBAAyB,CAC3D,MAAO,CAAAC,iBAAiB,KAAM,qBAAqB,CACnD,MAAO,CAAAC,QAAQ,KAAM,YAAY,CACjC,MAAO,CAAAC,kBAAkB,KAAM,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEtD,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACX;AACA;AACA,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGT,QAAQ,CAAC,MAAM,CAAC,CAAE;AAEtD;AACA,KAAM,CAAAU,uBAAuB,CAAGA,CAAA,GAAM,CAClCC,OAAO,CAACC,GAAG,CAAC,+FAA+F,CAAC,CAC5GH,aAAa,CAAC,eAAe,CAAC,CAAE;AACpC,CAAC,CAED;AACA,KAAM,CAAAI,iBAAiB,CAAGA,CAAA,GAAM,CAC5B,OAAQL,UAAU,EACd,IAAK,mBAAmB,CACpB,mBAAOF,IAAA,CAACL,qBAAqB,EAACa,mBAAmB,CAAEJ,uBAAwB,CAAE,CAAC,CAClF,IAAK,eAAe,CAChB,mBAAOJ,IAAA,CAACJ,iBAAiB,GAAE,CAAC,CAChC,IAAK,MAAM,CACP,mBAAOI,IAAA,CAACH,QAAQ,GAAE,CAAC,CACvB,IAAK,gBAAgB,CACjB,mBAAOG,IAAA,CAACF,kBAAkB,GAAE,CAAC,CACjC,QACI,mBAAOE,IAAA,CAACH,QAAQ,GAAE,CAAC,CAAE;AAC7B,CACJ,CAAC,CAED,mBACIG,IAAA,QAAKS,SAAS,CAAC,KAAK,CAAAC,QAAA,CAWfH,iBAAiB,CAAC,CAAC,CACnB,CAAC,CAEd,CAEA,cAAe,CAAAN,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}