{"ast":null,"code":"import React,{useEffect,useState,useCallback}from'react';import{useNavigate}from'react-router-dom';import'./CreateProjectPage.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function CreateProjectPage(){const navigate=useNavigate();const[createProjectError,setCreateProjectError]=useState(null);const[projectName,setProjectName]=useState('');const[nginxPort,setNginxPort]=useState('');const[backendPort,setBackendPort]=useState('');const[frontendPort,setFrontendPort]=useState('');const[includePostgres,setIncludePostgres]=useState(true);const[dbName,setDbName]=useState('');const[dbUser,setDbUser]=useState('');const[dbPassword,setDbPassword]=useState('');const[dbPort,setDbPort]=useState('');// Получаем его из API now\nconst[includeMikopbxFirst,setIncludeMikopbxFirst]=useState(false);const[includeMikopbxSecond,setIncludeMikopbxSecond]=useState(false);const fetchAvailablePortsAndDbInfo=useCallback(async()=>{setCreateProjectError(null);try{const response=await fetch('/api/generate-available-ports');if(!response.ok){throw new Error('Failed to fetch available ports');}const data=await response.json();setNginxPort(data.nginxPort);setBackendPort(data.backendPort);setFrontendPort(data.frontendPort);setDbPort(data.dbPort);// Устанавливаем dbPort\n}catch(err){console.error(\"Error fetching available ports:\",err);setCreateProjectError(`Ошибка получения портов: ${err.message}`);}try{const response=await fetch('/api/generate-db-credentials');if(!response.ok){throw new Error('Failed to fetch DB credentials');}const data=await response.json();setDbName(data.dbName);setDbUser(data.dbUser);setDbPassword(data.dbPassword);}catch(err){console.error(\"Error fetching DB credentials:\",err);// Если ошибка получения данных БД, не перезаписываем общую ошибку портов\nif(!createProjectError){setCreateProjectError(`Ошибка получения данных БД: ${err.message}`);}}},[createProjectError]);useEffect(()=>{fetchAvailablePortsAndDbInfo();},[fetchAvailablePortsAndDbInfo]);const handleCreateProject=async e=>{e.preventDefault();setCreateProjectError(null);if(!projectName){setCreateProjectError('Имя проекта не может быть пустым.');return;}try{const response=await fetch('/api/generate-project',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({projectName,nginxPort:parseInt(nginxPort,10),backendPort:parseInt(backendPort,10),frontendPort:parseInt(frontendPort,10),includeMikopbxFirst,includeMikopbxSecond,includePostgres,dbName:includePostgres?dbName:null,dbUser:includePostgres?dbUser:null,dbPassword:includePostgres?dbPassword:null,dbPort:includePostgres?parseInt(dbPort,10):null})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||'Failed to create project');}const data=await response.json();alert(`Проект \"${projectName}\" создан успешно! ID: ${data.projectId}`);// Очистка формы\nsetProjectName('');setIncludeMikopbxFirst(false);setIncludeMikopbxSecond(false);setIncludePostgres(true);fetchAvailablePortsAndDbInfo();// Обновить предлагаемые порты и данные БД\nnavigate(`/project/${data.projectId}`);// Переход на страницу деталей созданного проекта\n}catch(err){console.error('Error creating project:',err);setCreateProjectError(`Ошибка создания проекта: ${err.message}`);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"page-container create-project-page\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleCreateProject,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"projectName\",children:\"\\u0418\\u043C\\u044F \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u0430:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"projectName\",value:projectName,onChange:e=>setProjectName(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"nginxPort\",children:\"\\u041F\\u043E\\u0440\\u0442 Nginx (Front-end):\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"nginxPort\",value:nginxPort,onChange:e=>setNginxPort(e.target.value),required:true,min:\"1024\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"frontendPort\",children:\"\\u041F\\u043E\\u0440\\u0442 Frontend (\\u0432\\u043D\\u0443\\u0442\\u0440\\u0435\\u043D\\u043D\\u0438\\u0439, \\u0434\\u043B\\u044F \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 Nginx):\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"frontendPort\",value:frontendPort,onChange:e=>setFrontendPort(e.target.value),required:true,min:\"1024\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"backendPort\",children:\"\\u041F\\u043E\\u0440\\u0442 Backend:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"backendPort\",value:backendPort,onChange:e=>setBackendPort(e.target.value),required:true,min:\"1024\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group checkbox-group\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",id:\"includePostgres\",checked:includePostgres,onChange:e=>setIncludePostgres(e.target.checked)}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"includePostgres\",children:\"\\u0412\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C PostgreSQL\"})]}),includePostgres&&/*#__PURE__*/_jsxs(\"div\",{className:\"db-details\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438 PostgreSQL:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"dbName\",children:\"\\u0418\\u043C\\u044F \\u0411\\u0414:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"dbName\",value:dbName,onChange:e=>setDbName(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"dbUser\",children:\"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C \\u0411\\u0414:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"dbUser\",value:dbUser,onChange:e=>setDbUser(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"dbPassword\",children:\"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C \\u0411\\u0414:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"dbPassword\",value:dbPassword,onChange:e=>setDbPassword(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"dbPort\",children:\"\\u041F\\u043E\\u0440\\u0442 \\u0411\\u0414 (\\u0432\\u043D\\u0435\\u0448\\u043D\\u0438\\u0439):\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"dbPort\",value:dbPort,onChange:e=>setDbPort(e.target.value),required:true,min:\"1024\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:fetchAvailablePortsAndDbInfo,className:\"small-button\",children:\"\\u0421\\u0433\\u0435\\u043D\\u0435\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043D\\u043E\\u0432\\u044B\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u0411\\u0414 \\u0438 \\u043F\\u043E\\u0440\\u0442\\u044B\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group checkbox-group\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",id:\"includeMikopbxFirst\",checked:includeMikopbxFirst,onChange:e=>setIncludeMikopbxFirst(e.target.checked)}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"includeMikopbxFirst\",children:\"\\u0412\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C MikoPBX First (SSH: 123, Web: 8080/8443)\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group checkbox-group\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",id:\"includeMikopbxSecond\",checked:includeMikopbxSecond,onChange:e=>setIncludeMikopbxSecond(e.target.checked)}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"includeMikopbxSecond\",children:\"\\u0412\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C MikoPBX Second (SSH: 2223, Web: 8081/9443)\"})]}),createProjectError&&/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:createProjectError}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"submit-button\",children:\"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\"})]})]});}export default CreateProjectPage;","map":{"version":3,"names":["React","useEffect","useState","useCallback","useNavigate","jsx","_jsx","jsxs","_jsxs","CreateProjectPage","navigate","createProjectError","setCreateProjectError","projectName","setProjectName","nginxPort","setNginxPort","backendPort","setBackendPort","frontendPort","setFrontendPort","includePostgres","setIncludePostgres","dbName","setDbName","dbUser","setDbUser","dbPassword","setDbPassword","dbPort","setDbPort","includeMikopbxFirst","setIncludeMikopbxFirst","includeMikopbxSecond","setIncludeMikopbxSecond","fetchAvailablePortsAndDbInfo","response","fetch","ok","Error","data","json","err","console","error","message","handleCreateProject","e","preventDefault","method","headers","body","JSON","stringify","parseInt","errorData","alert","projectId","className","children","onSubmit","htmlFor","type","id","value","onChange","target","required","min","checked","onClick"],"sources":["/root/install-wizard/docker-templates/frontend-app-template/src/CreateProjectPage.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './CreateProjectPage.css';\n\nfunction CreateProjectPage() {\n    const navigate = useNavigate();\n    const [createProjectError, setCreateProjectError] = useState(null);\n    const [projectName, setProjectName] = useState('');\n    const [nginxPort, setNginxPort] = useState('');\n    const [backendPort, setBackendPort] = useState('');\n    const [frontendPort, setFrontendPort] = useState('');\n    const [includePostgres, setIncludePostgres] = useState(true);\n    const [dbName, setDbName] = useState('');\n    const [dbUser, setDbUser] = useState('');\n    const [dbPassword, setDbPassword] = useState('');\n    const [dbPort, setDbPort] = useState(''); // Получаем его из API now\n\n    const [includeMikopbxFirst, setIncludeMikopbxFirst] = useState(false);\n    const [includeMikopbxSecond, setIncludeMikopbxSecond] = useState(false);\n\n    const fetchAvailablePortsAndDbInfo = useCallback(async () => {\n        setCreateProjectError(null);\n        try {\n            const response = await fetch('/api/generate-available-ports');\n            if (!response.ok) {\n                throw new Error('Failed to fetch available ports');\n            }\n            const data = await response.json();\n            setNginxPort(data.nginxPort);\n            setBackendPort(data.backendPort);\n            setFrontendPort(data.frontendPort);\n            setDbPort(data.dbPort); // Устанавливаем dbPort\n        }\n        catch (err) {\n            console.error(\"Error fetching available ports:\", err);\n            setCreateProjectError(`Ошибка получения портов: ${err.message}`);\n        }\n\n        try {\n            const response = await fetch('/api/generate-db-credentials');\n            if (!response.ok) {\n                throw new Error('Failed to fetch DB credentials');\n            }\n            const data = await response.json();\n            setDbName(data.dbName);\n            setDbUser(data.dbUser);\n            setDbPassword(data.dbPassword);\n        }\n        catch (err) {\n            console.error(\"Error fetching DB credentials:\", err);\n            // Если ошибка получения данных БД, не перезаписываем общую ошибку портов\n            if (!createProjectError) {\n                 setCreateProjectError(`Ошибка получения данных БД: ${err.message}`);\n            }\n        }\n    }, [createProjectError]);\n\n    useEffect(() => {\n        fetchAvailablePortsAndDbInfo();\n    }, [fetchAvailablePortsAndDbInfo]);\n\n\n    const handleCreateProject = async (e) => {\n        e.preventDefault();\n        setCreateProjectError(null);\n\n        if (!projectName) {\n            setCreateProjectError('Имя проекта не может быть пустым.');\n            return;\n        }\n\n        try {\n            const response = await fetch('/api/generate-project', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    projectName,\n                    nginxPort: parseInt(nginxPort, 10),\n                    backendPort: parseInt(backendPort, 10),\n                    frontendPort: parseInt(frontendPort, 10),\n                    includeMikopbxFirst,\n                    includeMikopbxSecond,\n                    includePostgres,\n                    dbName: includePostgres ? dbName : null,\n                    dbUser: includePostgres ? dbUser : null,\n                    dbPassword: includePostgres ? dbPassword : null,\n                    dbPort: includePostgres ? parseInt(dbPort, 10) : null,\n                }),\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || 'Failed to create project');\n            }\n\n            const data = await response.json();\n            alert(`Проект \"${projectName}\" создан успешно! ID: ${data.projectId}`);\n            // Очистка формы\n            setProjectName('');\n            setIncludeMikopbxFirst(false);\n            setIncludeMikopbxSecond(false);\n            setIncludePostgres(true);\n            fetchAvailablePortsAndDbInfo(); // Обновить предлагаемые порты и данные БД\n            navigate(`/project/${data.projectId}`); // Переход на страницу деталей созданного проекта\n        } catch (err) {\n            console.error('Error creating project:', err);\n            setCreateProjectError(`Ошибка создания проекта: ${err.message}`);\n        }\n    };\n\n    return (\n        <div className=\"page-container create-project-page\">\n            <h1>Создать новый проект</h1>\n            <form onSubmit={handleCreateProject}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"projectName\">Имя проекта:</label>\n                    <input\n                        type=\"text\"\n                        id=\"projectName\"\n                        value={projectName}\n                        onChange={(e) => setProjectName(e.target.value)}\n                        required\n                    />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"nginxPort\">Порт Nginx (Front-end):</label>\n                    <input\n                        type=\"number\"\n                        id=\"nginxPort\"\n                        value={nginxPort}\n                        onChange={(e) => setNginxPort(e.target.value)}\n                        required\n                        min=\"1024\"\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"frontendPort\">Порт Frontend (внутренний, для связи с Nginx):</label>\n                    <input\n                        type=\"number\"\n                        id=\"frontendPort\"\n                        value={frontendPort}\n                        onChange={(e) => setFrontendPort(e.target.value)}\n                        required\n                        min=\"1024\"\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"backendPort\">Порт Backend:</label>\n                    <input\n                        type=\"number\"\n                        id=\"backendPort\"\n                        value={backendPort}\n                        onChange={(e) => setBackendPort(e.target.value)}\n                        required\n                        min=\"1024\"\n                    />\n                </div>\n\n                <div className=\"form-group checkbox-group\">\n                    <input\n                        type=\"checkbox\"\n                        id=\"includePostgres\"\n                        checked={includePostgres}\n                        onChange={(e) => setIncludePostgres(e.target.checked)}\n                    />\n                    <label htmlFor=\"includePostgres\">Включить PostgreSQL</label>\n                </div>\n\n                {includePostgres && (\n                    <div className=\"db-details\">\n                        <h4>Настройки PostgreSQL:</h4>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"dbName\">Имя БД:</label>\n                            <input type=\"text\" id=\"dbName\" value={dbName} onChange={(e) => setDbName(e.target.value)} required />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"dbUser\">Пользователь БД:</label>\n                            <input type=\"text\" id=\"dbUser\" value={dbUser} onChange={(e) => setDbUser(e.target.value)} required />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"dbPassword\">Пароль БД:</label>\n                            <input type=\"text\" id=\"dbPassword\" value={dbPassword} onChange={(e) => setDbPassword(e.target.value)} required />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"dbPort\">Порт БД (внешний):</label>\n                            <input type=\"number\" id=\"dbPort\" value={dbPort} onChange={(e) => setDbPort(e.target.value)} required min=\"1024\" />\n                        </div>\n                        <button type=\"button\" onClick={fetchAvailablePortsAndDbInfo} className=\"small-button\">Сгенерировать новые данные БД и порты</button>\n                    </div>\n                )}\n\n                <div className=\"form-group checkbox-group\">\n                    <input\n                        type=\"checkbox\"\n                        id=\"includeMikopbxFirst\"\n                        checked={includeMikopbxFirst}\n                        onChange={(e) => setIncludeMikopbxFirst(e.target.checked)}\n                    />\n                    <label htmlFor=\"includeMikopbxFirst\">Включить MikoPBX First (SSH: 123, Web: 8080/8443)</label>\n                </div>\n\n                <div className=\"form-group checkbox-group\">\n                    <input\n                        type=\"checkbox\"\n                        id=\"includeMikopbxSecond\"\n                        checked={includeMikopbxSecond}\n                        onChange={(e) => setIncludeMikopbxSecond(e.target.checked)}\n                    />\n                    <label htmlFor=\"includeMikopbxSecond\">Включить MikoPBX Second (SSH: 2223, Web: 8081/9443)</label>\n                </div>\n\n                {createProjectError && <p className=\"error-message\">{createProjectError}</p>}\n\n                <button type=\"submit\" className=\"submit-button\">Создать проект</button>\n            </form>\n        </div>\n    );\n}\n\nexport default CreateProjectPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}