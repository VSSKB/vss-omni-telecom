// /root/install-wizard/server.js
const express = require('express');
const path = require('path');
const fs = require('fs');
const { exec, execSync } = require('child_process');
const bodyParser = require('body-parser');
const cors = require('cors'); // Добавим CORS для гибкости, если нужно
const { v4: uuidv4 } = require('uuid'); // Для генерации ID проекта

const app = express();
const PORT = 3000;
// Middleware
app.use(cors()); // Включаем CORS для всех запросов
app.use(bodyParser.json()); // Для парсинга JSON-запросов
app.use(express.static(path.join(__dirname, 'public'))); // Обслуживание статических файлов из public

// Определения путей к директориям
const BASE_DIR = __dirname;
const PROJECTS_DIR = path.join(BASE_DIR, 'projects');
const DB_DATA_DIR = path.join(BASE_DIR, 'db_data');
const GENERATED_PROJECTS_DIR = path.join(BASE_DIR, 'generated-projects'); // Если используется
const DOCKER_TEMPLATES_DIR = path.join(BASE_DIR, 'docker-templates');
// const FRONTEND_APP_BUILD_DIR = path.join(DOCKER_TEMPLATES_DIR, 'frontend-app-template', 'build'); // Эту строку можно удалить или закомментировать, так как она не используется для статики

// Путь к файлу с данными проектов
const PROJECTS_JSON_PATH = path.join(BASE_DIR, 'projects.json');

// --- Вспомогательные функции для работы с файлами и Docker ---

// Проверка и создание необходимых директорий
function ensureDirectoriesExist() {
    // Создаем основные директории
    [PROJECTS_DIR, DB_DATA_DIR, GENERATED_PROJECTS_DIR].forEach(dir => {
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
            console.log(`Директория ${dir} создана.`);
        } else {
            console.log(`Директория ${dir} уже существует.`);
        }
    });

    // Дополнительная проверка для frontend-app-template/build, если она используется для копирования
    const frontendBuildSourcePath = path.join(DOCKER_TEMPLATES_DIR, 'frontend-app-template', 'build'); // Переменная объявлена здесь
    if (!fs.existsSync(frontendBuildSourcePath)) { // Используется правильное имя переменной
        console.warn(`Внимание: Директория сборки фронтенда не найдена: ${frontendBuildSourcePath}. Убедитесь, что frontend-app-template/build существует.`);
    }
}


// Проверка существования шаблонов Docker
function checkDockerTemplates() {
    const templates = [
        'backend.Dockerfile',
        'frontend.Dockerfile',
        'docker-compose.yml.template',
        'nginx.conf'
    ];
    let allTemplatesExist = true;
    templates.forEach(template => {
        const templatePath = path.join(DOCKER_TEMPLATES_DIR, template);
        if (!fs.existsSync(templatePath)) {
            console.error(`Ошибка: Шаблон Docker не найден: ${templatePath}`);
            allTemplatesExist = false;
        }
    });
    if (allTemplatesExist) {
        console.log('Шаблоны Docker проверены и готовы к использованию.');
    } else {
        console.error('Некоторые шаблоны Docker отсутствуют. Убедитесь, что они находятся в директории docker-templates.');
    }
}

// Проверка существования шаблонов приложений (Frontend/Backend)
function checkAppTemplates() {
    // Проверяем наличие package.json как индикатора шаблона
    const backendTemplatePath = path.join(DOCKER_TEMPLATES_DIR, 'backend', 'package.json');
    const frontendTemplatePath = path.join(DOCKER_TEMPLATES_DIR, 'frontend-app-template', 'package.json');

    if (fs.existsSync(backendTemplatePath)) {
        console.log('Шаблон Backend-приложения проверен и готов к использованию.');
    } else {
        console.warn('Внимание: Шаблон Backend-приложения не найден или неполный. Убедитесь, что docker-templates/backend содержит исходники.');
    }

    if (fs.existsSync(frontendTemplatePath)) {
        console.log('Шаблон Frontend-приложения проверен и готов к использованию.');
    } else {
        console.warn('Внимание: Шаблон Frontend-приложения не найден или неполный. Убедитесь, что docker-templates/frontend-app-template содержит исходники (или хотя бы build директорию).');
    }
}

// Запуск начальных проверок при старте сервера
ensureDirectoriesExist();
checkDockerTemplates();
checkAppTemplates();

// --- API Эндпоинты ---

// API для проверки зависимостей (Docker, Docker Compose, Node.js)
app.get('/api/check-dependencies', async (req, res) => {
    const results = {
        docker: { installed: false, version: '' },
        dockerCompose: { installed: false, version: '' },
        nodejs: { installed: false, version: '' },
        allDependenciesMet: false
    };

    const checkCommand = (cmd) => {
        try {
            // Использование `execSync` для захвата вывода, игнорируя stderr для "чистого" вывода версии.
            // Однако, ошибки будут перехвачены блоком catch.
            const output = execSync(cmd, { encoding: 'utf8', stdio: ['pipe', 'pipe', 'ignore'] }).trim();
            return output;
        } catch (error) {
            console.error(`Ошибка выполнения команды "${cmd}": ${error.message}`);
            // Возвращаем null, чтобы сигнализировать о неудаче без падения сервера
            return null;
        }
    };

    // Проверка Docker
    const dockerVersion = checkCommand('docker --version');
    if (dockerVersion) {
        results.docker.installed = true;
        results.docker.version = dockerVersion.replace('Docker version ', '');
    }

    // Проверка Docker Compose (v1 и v2)
    let composeVersion = checkCommand('docker-compose --version'); // v1
    if (composeVersion) {
        results.dockerCompose.installed = true;
        results.dockerCompose.version = composeVersion.replace('docker-compose version ', '');
    } else {
        composeVersion = checkCommand('docker compose version --short'); // v2
        if (composeVersion) {
            results.dockerCompose.installed = true;
            results.dockerCompose.version = `v2.${composeVersion.trim()}`; // Указываем, что это v2
        }
    }

    // Проверка Node.js
    const nodeVersion = checkCommand('node -v');
    if (nodeVersion) {
        results.nodejs.installed = true;
        results.nodejs.version = nodeVersion;
    }

    results.allDependenciesMet = results.docker.installed && results.dockerCompose.installed && results.nodejs.installed;

    res.json(results);
});

// API для генерации свободных портов
app.get('/api/generate-ports', async (req, res) => {
    // В реальном приложении здесь должна быть сложная логика поиска свободных портов
    // путем попытки привязаться к ним или сканирования.
    // Для простоты, здесь мы будем использовать предопределенные порты или имитировать их поиск.

    const getRandomPort = () => Math.floor(Math.random() * (65535 - 10000 + 1)) + 10000;

    // Имитация поиска свободных портов
    const ports = {
        nginx: 8080, // Обычно фиксированный или первый свободный веб-порт
        backend: getRandomPort(),
        frontend: getRandomPort(),
        mikopbx: getRandomPort(),
        db: getRandomPort()
    };

    // Убедимся, что порты не конфликтуют друг с другом (для примера)
    let uniquePorts = new Set();
    // Добавляем nginxPort, чтобы он не пересекался со случайными
    uniquePorts.add(8080);
    // Добавляем порты до тех пор, пока не будет достаточно уникальных
    while(uniquePorts.size < 5 + 1) { // 5 случайных + 1 фиксированный nginx
        uniquePorts.add(getRandomPort());
    }
    const uniquePortsArray = Array.from(uniquePorts);

    // Распределяем уникальные порты (исключая 8080, который уже назначен Nginx)
    // Удаляем 8080 из массива, чтобы использовать оставшиеся для других сервисов
    const availableRandomPorts = uniquePortsArray.filter(p => p !== 8080);

    ports.nginx = 8080;
    ports.backend = availableRandomPorts.shift(); // Берем первый доступный
    ports.frontend = availableRandomPorts.shift();
    ports.mikopbx = availableRandomPorts.shift();
    ports.db = availableRandomPorts.shift();

    res.json(ports);
});

// API для генерации проекта
app.post('/api/generate-project', async (req, res) => {
    const { projectName, ports, includeMikopbx, includePostgres, db } = req.body;

    if (!projectName || !ports) {
        return res.status(400).json({ message: 'Недостаточно данных для создания проекта.' });
    }

    const projectId = uuidv4();
    const projectPath = path.join(PROJECTS_DIR, projectId);
    const backendTemplatePath = path.join(DOCKER_TEMPLATES_DIR, 'backend');
    const frontendTemplatePath = path.join(DOCKER_TEMPLATES_DIR, 'frontend-app-template');
    const dockerComposeTemplatePath = path.join(DOCKER_TEMPLATES_DIR, 'docker-compose.yml.template');
    const backendDockerfileTemplatePath = path.join(DOCKER_TEMPLATES_DIR, 'backend.Dockerfile');
    const frontendDockerfileTemplatePath = path.join(DOCKER_TEMPLATES_DIR, 'frontend.Dockerfile');
    const nginxConfTemplatePath = path.join(DOCKER_TEMPLATES_DIR, 'nginx.conf');

    try {
        // 1. Создание директории проекта
        fs.mkdirSync(projectPath, { recursive: true });

        // 2. Копирование шаблонов приложений
        // Копирование собранного фронтенда
        // Убедитесь, что sourcePath ведет к скомпилированному фронтенду, если он есть
        const frontendBuildSourcePath = path.join(frontendTemplatePath, 'build');
        if (fs.existsSync(frontendBuildSourcePath)) {
            fs.mkdirSync(path.join(projectPath, 'frontend'), { recursive: true });
            execSync(`cp -R ${frontendBuildSourcePath}/* ${path.join(projectPath, 'frontend')}/`);
        } else {
            console.warn(`Внимание: директория сборки фронтенда не найдена: ${frontendBuildSourcePath}. Проект может быть неполным.`);
            // Если директория сборки фронтенда отсутствует, можно создать пустой index.html
            // чтобы избежать ошибок при попытке Nginx отдавать отсутствующие файлы.
            fs.mkdirSync(path.join(projectPath, 'frontend'), { recursive: true });
            fs.writeFileSync(path.join(projectPath, 'frontend', 'index.html'), '<h1>Frontend application not built. Please build your frontend application and place it in docker-templates/frontend-app-template/build.</h1>');
        }

        // Копирование backend (исходники)
        if (fs.existsSync(backendTemplatePath)) {
            fs.mkdirSync(path.join(projectPath, 'backend'), { recursive: true });
            execSync(`cp -R ${backendTemplatePath}/* ${path.join(projectPath, 'backend')}/`);
        } else {
            console.warn(`Внимание: директория шаблона бэкенда не найдена: ${backendTemplatePath}. Проект может быть неполным.`);
        }

        // 3. Копирование и модификация Dockerfile и docker-compose.yml.template
        let dockerComposeContent = fs.readFileSync(dockerComposeTemplatePath, 'utf8');
        let backendDockerfileContent = fs.readFileSync(backendDockerfileTemplatePath, 'utf8');
        let frontendDockerfileContent = fs.readFileSync(frontendDockerfileTemplatePath, 'utf8');
        let nginxConfContent = fs.readFileSync(nginxConfTemplatePath, 'utf8');

        // Замена плейсхолдеров
        dockerComposeContent = dockerComposeContent
            .replace(/{{PROJECT_NAME}}/g, projectName)
            .replace(/{{NGINX_PORT}}/g, ports.nginx)
            .replace(/{{BACKEND_PORT}}/g, ports.backend)
            .replace(/{{FRONTEND_PORT}}/g, ports.frontend)
            .replace(/{{MIKOPBX_SERVICE}}/g, includeMikopbx ?
`
  mikopbx:
    image: mikopbx/miko-pbx:latest # или ваша актуальная версия
    ports:
      - "${ports.mikopbx}:80"
    restart: always
    volumes:
      - ./mikopbx_data:/var/lib/mikopbx`
: '')
            .replace(/{{POSTGRES_SERVICE}}/g, includePostgres ?
`
  postgres:
    image: postgres:13-alpine # или ваша актуальная версия
    environment:
      POSTGRES_DB: ${db.dbName}
      POSTGRES_USER: ${db.dbUser}
      POSTGRES_PASSWORD: ${db.dbPassword}
    ports:
      - "${db.dbPort}:5432"
    restart: always
    volumes:
      - ./db_data:/var/lib/postgresql/data`
: '');

        // Сохранение модифицированных файлов
        fs.writeFileSync(path.join(projectPath, 'docker-compose.yml'), dockerComposeContent);
        fs.writeFileSync(path.join(projectPath, 'backend.Dockerfile'), backendDockerfileContent);
        fs.writeFileSync(path.join(projectPath, 'frontend.Dockerfile'), frontendDockerfileContent);
        fs.writeFileSync(path.join(projectPath, 'nginx.conf'), nginxConfContent);


        // 4. Сохранение метаданных проекта
        const projects = JSON.parse(fs.readFileSync(PROJECTS_JSON_PATH, 'utf8') || '[]');
        projects.push({
            id: projectId,
            name: projectName,
            path: projectPath,
            status: 'stopped', // Изначально проект остановлен
            ports: ports,
            includeMikopbx,
            includePostgres,
            db: includePostgres ? { dbName: db.dbName, dbUser: db.dbUser, dbPort: db.dbPort } : undefined
        });
        fs.writeFileSync(PROJECTS_JSON_PATH, JSON.stringify(projects, null, 2));

        res.json({ message: 'Проект успешно сгенерирован!', projectId: projectId, projectName: projectName });

    } catch (error) {
        console.error('Ошибка при генерации проекта:', error);
        // Добавляем более детальное сообщение об ошибке для отладки
        res.status(500).json({ message: 'Ошибка сервера при генерации проекта.', error: error.message, stack: error.stack });
    }
});

// API для получения списка проектов
app.get('/api/projects', (req, res) => {
    try {
        if (!fs.existsSync(PROJECTS_JSON_PATH)) {
            return res.json([]);
        }
        const projects = JSON.parse(fs.readFileSync(PROJECTS_JSON_PATH, 'utf8'));
        res.json(projects);
    } catch (error) {
        console.error('Ошибка чтения projects.json:', error);
        res.status(500).json({ message: 'Ошибка чтения списка проектов.' });
    }
});

// API для запуска проекта
app.post('/api/projects/:id/start', (req, res) => {
    const projectId = req.params.id;
    const projects = JSON.parse(fs.readFileSync(PROJECTS_JSON_PATH, 'utf8'));
    const project = projects.find(p => p.id === projectId);

    if (!project) {
        return res.status(404).json({ message: 'Проект не найден.' });
    }

    const projectPath = project.path;
    // Используем 'docker compose' вместо 'docker-compose' для совместимости с Docker Compose v2
    exec(`docker compose -f "${path.join(projectPath, 'docker-compose.yml')}" up -d --build`, (error, stdout, stderr) => {
        if (error) {
            console.error(`Ошибка запуска проекта ${projectId}: ${error.message}`);
            return res.status(500).json({ message: `Ошибка запуска проекта: ${error.message}`, details: stderr });
        }
        project.status = 'running';
        fs.writeFileSync(PROJECTS_JSON_PATH, JSON.stringify(projects, null, 2));
        res.json({ message: `Проект ${projectId} успешно запущен.`, stdout, stderr });
    });
});

// API для остановки проекта
app.post('/api/projects/:id/stop', (req, res) => {
    const projectId = req.params.id;
    const projects = JSON.parse(fs.readFileSync(PROJECTS_JSON_PATH, 'utf8'));
    const project = projects.find(p => p.id === projectId);

    if (!project) {
        return res.status(404).json({ message: 'Проект не найден.' });
    }

    const projectPath = project.path;
    // Используем 'docker compose' вместо 'docker-compose' для совместимости с Docker Compose v2
    exec(`docker compose -f "${path.join(projectPath, 'docker-compose.yml')}" down`, (error, stdout, stderr) => {
        if (error) {
            console.error(`Ошибка остановки проекта ${projectId}: ${error.message}`);
            return res.status(500).json({ message: `Ошибка остановки проекта: ${error.message}`, details: stderr });
        }
        project.status = 'stopped';
        fs.writeFileSync(PROJECTS_JSON_PATH, JSON.stringify(projects, null, 2));
        res.json({ message: `Проект ${projectId} успешно остановлен.`, stdout, stderr });
    });
});

// API для удаления проекта
app.delete('/api/projects/:id', (req, res) => {
    const projectId = req.params.id;
    let projects = JSON.parse(fs.readFileSync(PROJECTS_JSON_PATH, 'utf8'));
    const projectIndex = projects.findIndex(p => p.id === projectId);

    if (projectIndex === -1) {
        return res.status(404).json({ message: 'Проект не найден.' });
    }

    const projectToRemove = projects[projectIndex];
    const projectPath = projectToRemove.path;

    try {
        // Сначала останавливаем проект, если он запущен
        // Используем 'docker compose' вместо 'docker-compose'
        execSync(`docker compose -f "${path.join(projectPath, 'docker-compose.yml')}" down`, { stdio: 'ignore', encoding: 'utf8' });

        // Удаляем директорию проекта
        fs.rmSync(projectPath, { recursive: true, force: true });

        // Удаляем проект из списка
        projects.splice(projectIndex, 1);
        fs.writeFileSync(PROJECTS_JSON_PATH, JSON.stringify(projects, null, 2));

        res.json({ message: `Проект ${projectId} успешно удален.` });
    } catch (error) {
        console.error(`Ошибка при удалении проекта ${projectId}:`, error);
        res.status(500).json({ message: `Ошибка сервера при удалении проекта: ${error.message}`, error: error.message });
    }
});


// API для загрузки Docker образа (глобально)
app.post('/api/pull-docker-image', (req, res) => {
    const { imageName } = req.body;
    if (!imageName) {
        return res.status(400).json({ message: 'Имя образа не указано.' });
    }

    exec(`docker pull ${imageName}`, (error, stdout, stderr) => {
        if (error) {
            console.error(`Ошибка загрузки образа ${imageName}: ${error.message}`);
            return res.status(500).json({ message: `Ошибка загрузки образа: ${error.message}`, details: stderr });
        }
        res.json({ message: `Образ ${imageName} успешно загружен.`, stdout, stderr });
    });
});

// API для создания пользователя VSS (пример, требует реализации на стороне VSS)
app.post('/api/create-vss-user', (req, res) => {
    const { username, password, projectId } = req.body; // projectId может быть использован для специфичных для проекта пользователей
    if (!username || !password) {
        return res.status(400).json({ message: 'Имя пользователя и пароль обязательны.' });
    }

    // Здесь должна быть реальная логика создания пользователя в вашей VSS-системе.
    // Это может быть вызов внешнего API, выполнение скрипта или добавление в БД.
    // Для примера, просто имитируем успех:
    console.log(`Имитация создания пользователя VSS для проекта ${projectId}: ${username} / ${password}`);
    res.json({ message: `Пользователь ${username} успешно создан (имитация).` });
});


// !!! ЭТИ ДВЕ ЧАСТИ БЫЛИ УДАЛЕНЫ/ЗАКОММЕНТИРОВАНЫ ИЗ ВАШЕГО server.js
// !!! Потому что они конфликтовали с обслуживанием статики из 'public'
/*
// Обслуживание фронтенда из build-директории, если он есть
app.use(express.static(FRONTEND_APP_BUILD_DIR));

// Перенаправление всех остальных запросов на index.html фронтенда для SPA-маршрутизации
// Этот маршрут должен быть последним
app.get('*', (req, res) => {
    // Если запрос не является API, отдаем index.html из фронтенд билда
    // Или, если это SPA, то только если запрос не является частью статики public
    if (!req.url.startsWith('/api/') && !req.url.startsWith('/static/')) { // Исключаем статику React билда
        res.sendFile(path.join(FRONTEND_APP_BUILD_DIR, 'index.html'));
    } else if (req.url === '/') { // Если это корневой запрос, но он не попал в public/index.html
        res.sendFile(path.join(BASE_DIR, 'public', 'index.html'));
    }
});
*/

// ОБСЛУЖИВАНИЕ index.html ИЗ PUBLIC ДОЛЖНО РАБОТАТЬ БЛАГОДАРЯ:
// app.use(express.static(path.join(__dirname, 'public')));
// Если запрошенный URL не соответствует статической папке (например, /),
// то Express автоматически отдаст index.html из этой папки.


// Запуск сервера
app.listen(PORT, () => {
    console.log(`Сервер запущен на http://localhost:${PORT}`);
    console.log(`Откройте http://localhost:${PORT} в вашем браузере.`);
});

// Инициализация файла projects.json, если его нет
if (!fs.existsSync(PROJECTS_JSON_PATH)) {
    fs.writeFileSync(PROJECTS_JSON_PATH, '[]', 'utf8');
    console.log(`Файл ${PROJECTS_JSON_PATH} создан.`);
}
